import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, CallbackQueryHandler
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
BOT_TOKEN = "7727901971:AAFzAWdeOKX8ZgQWuLEMoO4a2votBeMwlEw"
ADMIN_IDS = [6422904023, 987654321]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
SUPPORT_CHAT_ID = -4765445638  # ID —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
user_messages = {}

async def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ **Fatality Client**\n\n"
        "üìù –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –Ω–∞—à–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç—è—Ç –≤–∞–º!\n\n"
        "‚ö° –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–º–æ—á—å –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ!"
    )
    
    keyboard = [
        [InlineKeyboardButton("üìã –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq")],
        [InlineKeyboardButton("üîß –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def chatid(update: Update, context: CallbackContext) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —á–∞—Ç–∞"""
    chat = update.effective_chat
    user = update.effective_user
    
    chat_info = (
        f"üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:**\n"
        f"üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title or '–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è'}\n"
        f"üÜî Chat ID: `{chat.id}`\n"
        f"üìù –¢–∏–ø: {chat.type}\n"
        f"üë§ –í–∞—à ID: `{user.id}`"
    )
    
    await update.message.reply_text(chat_info, parse_mode='Markdown')

async def button_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "faq":
        faq_text = (
            "‚ùì **–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:**\n\n"
            "‚Ä¢ **–ü—Ä–æ–±–ª–µ–º–∞ —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π** - –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ª–∞—É–Ω—á–µ—Ä\n"
            "‚Ä¢ **–ö–ª–∏–µ–Ω—Ç –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è** - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ Java\n"
            "‚Ä¢ **–í—ã–ª–µ—Ç–∞–µ—Ç –∏–≥—Ä–∞** - –û–±–Ω–æ–≤–∏—Ç–µ –≤–∏–¥–µ–æ–¥—Ä–∞–π–≤–µ—Ä—ã\n"
            "‚Ä¢ **–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–æ–¥** - –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç\n\n"
            "–ï—Å–ª–∏ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ - –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º!"
        )
        await query.edit_message_text(faq_text, parse_mode='Markdown')
    
    elif query.data == "support":
        support_text = "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä—è–º–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç, –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º!"
        await query.edit_message_text(support_text)

async def handle_user_message(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = update.effective_user.id
    message = update.message
    username = update.effective_user.username
    first_name = update.effective_user.first_name
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if message.text and message.text.startswith('/'):
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    reply_keyboard = [
        [
            InlineKeyboardButton("üì® –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user_id}"),
            InlineKeyboardButton("üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ", callback_data=f"viewed_{user_id}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(reply_keyboard)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_message = (
        f"üÜï **–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ**\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {first_name} (@{username if username else '–Ω–µ—Ç'})\n"
        f"üÜî ID: {user_id}\n"
        f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M %d.%m.%Y')}\n"
        f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n{message.text if message.text else 'üìé –ú–µ–¥–∏–∞-—Ñ–∞–π–ª'}"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
    user_messages[user_id] = {
        'username': username,
        'first_name': first_name,
        'last_message': message.message_id
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    for admin_id in ADMIN_IDS:
        try:
            if message.text:
                sent_msg = await context.bot.send_message(
                    chat_id=admin_id,
                    text=admin_message,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            else:
                # –î–ª—è –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤
                if message.photo:
                    sent_msg = await context.bot.send_photo(
                        chat_id=admin_id,
                        photo=message.photo[-1].file_id,
                        caption=admin_message,
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
                elif message.document:
                    sent_msg = await context.bot.send_document(
                        chat_id=admin_id,
                        document=message.document.file_id,
                        caption=admin_message,
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            if 'reply_messages' not in context.chat_data:
                context.chat_data['reply_messages'] = {}
            context.chat_data['reply_messages'][sent_msg.message_id] = user_id
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞)
    if SUPPORT_CHAT_ID:
        try:
            if message.text:
                await context.bot.send_message(
                    chat_id=SUPPORT_CHAT_ID,
                    text=admin_message,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            else:
                if message.photo:
                    await context.bot.send_photo(
                        chat_id=SUPPORT_CHAT_ID,
                        photo=message.photo[-1].file_id,
                        caption=admin_message,
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
                elif message.document:
                    await context.bot.send_document(
                        chat_id=SUPPORT_CHAT_ID,
                        document=message.document.file_id,
                        caption=admin_message,
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.reply_text(
        "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.",
        reply_to_message_id=message.message_id
    )

async def admin_reply_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    query = update.callback_query
    data = query.data
    
    if data.startswith('reply_'):
        user_id = int(data.split('_')[1])
        context.user_data['replying_to'] = user_id
        await query.edit_message_text(
            f"üí¨ –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:"
        )
    
    elif data.startswith('viewed_'):
        user_id = int(data.split('_')[1])
        await query.edit_message_text(
            f"‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç {user_id} –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ"
        )

async def handle_admin_reply(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—á–∞–µ—Ç –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if 'replying_to' in context.user_data:
        target_user_id = context.user_data['replying_to']
        admin_message = update.message.text
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await context.bot.send_message(
                chat_id=target_user_id,
                text=f"üì® **–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:**\n\n{admin_message}"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            del context.user_data['replying_to']
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")

async def broadcast_command(update: Update, context: CallbackContext) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return
    
    message = ' '.join(context.args)
    await update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    # –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å ID –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–∏—Å–∞–ª–∏ –±–æ—Ç—É

async def stats_command(update: Update, context: CallbackContext) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    stats_text = (
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:**\n"
        f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_messages)}\n"
        f"üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )
    
    await update.message.reply_text(stats_text, parse_mode='Markdown')

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("chatid", chatid))
    application.add_handler(CommandHandler("broadcast", broadcast_command))
    application.add_handler(CommandHandler("stats", stats_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler, pattern="^(faq|support)$"))
    application.add_handler(CallbackQueryHandler(admin_reply_handler, pattern="^(reply|viewed)_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_message))
    application.add_handler(MessageHandler(filters.PHOTO | filters.Document.ALL, handle_user_message))
    application.add_handler(MessageHandler(filters.TEXT & filters.User(ADMIN_IDS), handle_admin_reply))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()